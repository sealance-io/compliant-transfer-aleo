name: Compliant Transfer Aleo Checks

on:
  pull_request:
    branches:
      - main
    paths-ignore:
      - '**/*.md'

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

concurrency:
  group: ci-tests-${{ github.ref }}-1
  cancel-in-progress: true

jobs:
  aleo-progrmas-test:
    name: Aleo Programs Tests
    runs-on: ubuntu-latest
    permissions:
      contents: 'read'
      packages: 'read'
    timeout-minutes: 90
    steps:
      - uses: actions/checkout@v4
      - name: Install Rust and Cargo
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: stable
      - name: Install Leo
        run: |
          git clone -b v2.4.1 --recurse-submodules --single-branch --depth 1 https://github.com/ProvableHQ/leo
          
          # Change directory to the cloned repository
          cd leo
          
          # Install Leo from the local path
          # --locked: Use the exact dependency versions from Cargo.lock
          # --path .: Install from the current directory
          cargo install --locked --path .
          
          # Verify the installation by checking Leo's version
          leo --version
          
          # Return to the original directory
          cd ..
      - uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'
          registry-url: 'https://registry.npmjs.org'

      - name: Setup doko-js-cli
        uses: ./.github/actions/setup-doko-js
        with:
          doko-repo: 'https://github.com/NadavPeled1998/doko-js.git'
          doko-branch: 'fix/array_type_conversion'

      - name: Login to GitHub Container Registry
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - run: cp .env.example .env

      - name: Install dependencies
        run: npm ci --ignore-scripts --no-audit
      - name: compile leo
        run: npm run compile

      - name: Install amareleo-chain
        run: cargo install amareleo-chain@2.1.0

      # Start amareleo-chain in background and save PID
      - name: Start amareleo-chain
        id: start-amareleo
        run: |
          amareleo-chain start &
          AMARELEO_PID=$!
          echo "pid=$AMARELEO_PID" >> $GITHUB_OUTPUT
          
          # Wait for process to start (up to 30 seconds)
          START_TIMEOUT=30
          for i in $(seq 1 $START_TIMEOUT); do
            if ps -p $AMARELEO_PID > /dev/null; then
              echo "amareleo-chain started with PID $AMARELEO_PID"
              break
            fi
            
            if [ $i -eq $START_TIMEOUT ]; then
              echo "amareleo-chain failed to start within $START_TIMEOUT seconds"
              exit 1
            fi
            
            sleep 1
          done

      - name: Run all programs tests 
        run: npm run test
        env:
          USE_TEST_CONTAINERS: false


      # Kill the amareleo-chain process
      - name: Kill amareleo-chain
        if: always()  # Run this step even if previous steps fail
        run: |
          AMARELEO_PID=${{ steps.start-amareleo.outputs.pid }}
          if [ -n "$AMARELEO_PID" ] && ps -p $AMARELEO_PID > /dev/null; then
            echo "Killing amareleo-chain process with PID $AMARELEO_PID"
            kill $AMARELEO_PID
            
            # Wait for process to terminate (up to 10 seconds)
            for i in $(seq 1 10); do
              if ! ps -p $AMARELEO_PID > /dev/null; then
                echo "Process terminated successfully"
                break
              fi
              
              if [ $i -eq 10 ]; then
                echo "Process didn't terminate gracefully, forcing kill"
                kill -9 $AMARELEO_PID || true
              fi
              
              sleep 1
            done
          else
            echo "No running amareleo-chain process found to kill"
          fi
