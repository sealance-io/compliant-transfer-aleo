diff --git a/node_modules/@doko-js/core/dist/index.js b/node_modules/@doko-js/core/dist/index.js
index 4d3b119..94bc2cc 100644
--- a/node_modules/@doko-js/core/dist/index.js
+++ b/node_modules/@doko-js/core/dist/index.js
@@ -1311,7 +1311,7 @@ const checkDeployment = async endpoint => {
         await response.json();
         return true;
     } catch (e) {
-        if (e?.message?.includes("Missing program for ID")) {
+        if (e?.message?.includes("Missing program for ID") || e?.message?.includes("Program not found")) {
             DokoJSLogger.info("Deployment not found");
             return false;
         }
@@ -1359,10 +1359,11 @@ async function deployAleo(aleoCode, config, aleoFilesDir) {
     DokoJSLogger.log(`Deploying program ${config.appName}`);
     const projectDir = await makeProjectForDeploy(`${config.appName}.aleo`, aleoCode, aleoFilesDir);
     const priorityFee = config.priorityFee || 0;
-    const cmd = leoDeployCommand(projectDir, config.privateKey, nodeEndPoint, config.networkName, priorityFee, true);
+    const isDevnet = nodeEndPoint.includes("localhost") || nodeEndPoint.includes("host.docker.internal");
+    const cmd = leoDeployCommand(projectDir, config.privateKey, nodeEndPoint, config.networkName, priorityFee, isDevnet);
     DokoJSLogger.debug(cmd);
     const {stdout} = await execute(cmd);
-    const result = transactionHashToTransactionResponseObject(stdout.split("Deployment")[2].split(" ")[1], "deploy");
+    const result = transactionHashToTransactionResponseObject(stdout.split("- transaction ID: '").pop().split("'")[0], "deploy");
     return new SnarkDeployResponse(result?.id || "", config);
 }
 
@@ -1391,15 +1392,53 @@ const snarkDeploy = async ({config}) => {
             programName: config.appName
         });
     }
+
     DokoJSLogger.info(`Deploying program ${config.appName}`);
-    const cmd = leoDeployCommand(config.contractPath, config.privateKey, nodeEndPoint, config.networkName, priorityFee);
+    const projectRoot = getProjectRoot();
+
+
+    const programPath = path.join(projectRoot, PROGRAM_DIRECTORY, config.appName, "program.json");
+    const programJson = JSON.parse(await fs.promises.readFile(programPath, "utf8"));
+    if (programJson.dependencies) {
+        const dependencies = [];
+        for (const dependency of programJson.dependencies) {
+        const isDeployed = await checkDeployment(
+            `${nodeEndPoint}/${config.networkName}/program/${dependency.name}`
+        );
+        if (isDeployed) {
+            dependency.location = 'network';
+            dependency.endpoint = nodeEndPoint;
+            dependency.network = config.networkName;
+            delete dependency.path;
+            delete dependency.edition;
+        } else {
+            dependency.location = 'local';
+            dependency.endpoint = undefined;
+            dependency.network = undefined;
+            dependency.path = `../../../imports/${dependency.name}`;
+        }
+        dependencies.push(dependency);
+        }
+        programJson.dependencies = dependencies;
+        await fs.promises.writeFile(
+            programPath,
+            JSON.stringify(programJson, null, 2), // pretty-print
+            "utf8"
+        );    
+    }
+
+    const isDevnet = nodeEndPoint.includes("localhost") || nodeEndPoint.includes("host.docker.internal");
+    const cmd = leoDeployCommand(config.contractPath, config.privateKey, nodeEndPoint, config.networkName, priorityFee, isDevnet);
     DokoJSLogger.debug(cmd);
+
     const {stdout} = await execute(cmd);
-    const result = transactionHashToTransactionResponseObject(stdout.split("Deployment")[2].split(" ")[1], "deploy");
+    const result = transactionHashToTransactionResponseObject(stdout.split("- transaction ID: '").pop().split("'")[0], "deploy");
+
     return new SnarkDeployResponse(result?.id || "", config);
 };
 
-const leoDeployCommand = (path, privateKey, endpoint, network = "testnet", priorityFee = 0, noBuild = false) => `cd ${path} && leo deploy --home ${ALEO_REGISTRY_DIR} --priority-fee ${priorityFee}  --private-key ${privateKey} --endpoint ${endpoint} --network ${network} --yes ${noBuild ? "--no-build" : ""}`;
+const leoDeployCommand = (path, privateKey, endpoint, network = "testnet", priorityFee = 0, devnet = true) => `cd ${path} && leo deploy --priority-fees ${priorityFee}  --private-key "${privateKey}" --endpoint ${endpoint} --network ${network} --yes --print --broadcast ${devnet ? "--devnet " : ""}`;
+
 
 const transactionHashToTransactionResponseObject = (transactionHash, type) => {
     const transaction = {
@@ -1582,7 +1621,8 @@ class SnarkExecuteContext {
         const transitionArgs = formatArgs(args);
         const cdCmd = this.params.isImportedAleo ? "" : `cd ${this.params.contractPath} && `;
         const programName = this.params.appName + ".aleo";
-        const cmd = `${cdCmd}leo execute --program ${programName} ${transitionName} ${transitionArgs} --network ${this.params.networkName} --private-key ${this.params.privateKey} --endpoint ${nodeEndPoint} --broadcast --yes`;
+        const isDevnet = nodeEndPoint.includes("localhost") || nodeEndPoint.includes("host.docker.internal");
+        const cmd = `${cdCmd}leo execute ${programName}/${transitionName} ${transitionArgs} --network ${this.params.networkName} ${isDevnet ? "--devnet --no-local" : ""} --private-key ${this.params.privateKey} --endpoint ${nodeEndPoint} --print --broadcast --yes`;
         DokoJSLogger.debug(cmd);
         const {stdout} = await execute(cmd);
         const {transaction} = this.parser.parse(stdout);
