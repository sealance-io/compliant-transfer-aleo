diff --git a/node_modules/@doko-js/core/dist/index.js b/node_modules/@doko-js/core/dist/index.js
index 4d3b119..9f47e68 100644
--- a/node_modules/@doko-js/core/dist/index.js
+++ b/node_modules/@doko-js/core/dist/index.js
@@ -1274,7 +1274,7 @@ async function post(url, options) {
     return response;
 }
 
-const ALEO_REGISTRY_DIR = "artifacts/aleo";
+const ALEO_REGISTRY_DIR = "build/";
 
 function parseJSONLikeString(recordString) {
     const json = recordString.replace(/(['"])?([a-z0-9A-Z_.]+)(['"])?/g, '"$2" ');
@@ -1343,6 +1343,7 @@ async function makeProjectForDeploy(programName, aleoCode, importsDir) {
     await fs$1.writeFile(join(projectDir, "program.json"), JSON.stringify(projectManifest));
     await fs$1.mkdir(join(projectDir, "build"));
     await fs$1.writeFile(join(`${projectDir}/build`, "main.aleo"), aleoCode);
+    await fs$1.writeFile(join(`${projectDir}/build`, "program.json"), JSON.stringify(projectManifest));
     await fs$1.copy(importsDir, join(`${projectDir}/build`, "imports"), {});
     return projectDir;
 }
@@ -1352,14 +1353,20 @@ async function deployAleo(aleoCode, config, aleoFilesDir) {
     if (!nodeEndPoint) {
         throw new Error("networkName missing in contract config for deployment");
     }
+
     const isProgramDeployed = await checkDeployment(`${nodeEndPoint}/${config.networkName}/program/${config.appName}.aleo`);
     if (isProgramDeployed) {
         throw new Error(`Program ${config.appName} is already deployed`);
     }
+
     DokoJSLogger.log(`Deploying program ${config.appName}`);
+
     const projectDir = await makeProjectForDeploy(`${config.appName}.aleo`, aleoCode, aleoFilesDir);
+
     const priorityFee = config.priorityFee || 0;
+
     const cmd = leoDeployCommand(projectDir, config.privateKey, nodeEndPoint, config.networkName, priorityFee, true);
+
     DokoJSLogger.debug(cmd);
     const {stdout} = await execute(cmd);
     const result = transactionHashToTransactionResponseObject(stdout.split("Deployment")[2].split(" ")[1], "deploy");
@@ -1391,15 +1398,18 @@ const snarkDeploy = async ({config}) => {
             programName: config.appName
         });
     }
+
     DokoJSLogger.info(`Deploying program ${config.appName}`);
     const cmd = leoDeployCommand(config.contractPath, config.privateKey, nodeEndPoint, config.networkName, priorityFee);
     DokoJSLogger.debug(cmd);
+
     const {stdout} = await execute(cmd);
     const result = transactionHashToTransactionResponseObject(stdout.split("Deployment")[2].split(" ")[1], "deploy");
+
     return new SnarkDeployResponse(result?.id || "", config);
 };
 
-const leoDeployCommand = (path, privateKey, endpoint, network = "testnet", priorityFee = 0, noBuild = false) => `cd ${path} && leo deploy --home ${ALEO_REGISTRY_DIR} --priority-fee ${priorityFee}  --private-key ${privateKey} --endpoint ${endpoint} --network ${network} --yes ${noBuild ? "--no-build" : ""}`;
+const leoDeployCommand = (path, privateKey, endpoint, network = "testnet", priorityFee = 0, noBuild = true) => `cd ${path} && leo deploy --priority-fee ${priorityFee}  --private-key ${privateKey} --endpoint ${endpoint} --network ${network} --yes ${noBuild ? "--no-build" : ""}`;
 
 const transactionHashToTransactionResponseObject = (transactionHash, type) => {
     const transaction = {
